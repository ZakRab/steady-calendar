create table calendars(
  id bigint generated by default as identity primary key,
  user_id uuid references auth.users not null,
  name text,
  color text,
  background_slug text,
  updated_at timestamp with time zone default timezone('utc::text', now()) not null,
  created_at timesstamp with time zone default timezone('utc'::text, now()) not null
);

--calendars table row level security
alter table calendars enable row level security;
create policy user_access_own_calendars on calendars
    For all
    USING (auth.uid() = user_id);

--calendars table updated_at trigger
Create or replace function update_updated_at_timestamp()
Returns trigger as $$
begin 
    New.updated_at = now();
    return new;
end;
$$ language 'plpgsql';
create trigger update_calendars_updated_at_timestamp
  before update on calendars
  for each row
  execute procedure update_updated_at_timestamp();

create table calendar_dates(
  id bigint generated by default as identity primary key,
  userId uuid references auth.users not null,
  calendar_id bigint references calendars (id) on delete cascade,
  date date not null
)

--calendars table row level security
alter table calendars_dates enable row level security;
create policy user_access_own_calendars_dates on calendars_dates
    For all
    USING (auth.uid() = user_id);

--calendar_dates indices
create unique index calendar_dates_calendar_id_date on calendar_dates (calendar_id, date);